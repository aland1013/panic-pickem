// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String
  passwordHash String
  isAdmin      Boolean  @default(false)
  entries      Entry[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Show {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  venue     Venue    @relation(fields: [venueId], references: [id])
  venueId   Int
  setlist   Set[]
  contest   Contest?
  isOver    Boolean  @default(false)
  info      String?
  psUrl     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Venue {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  city      String
  state     String
  shows     Show[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Set {
  id        String    @id // showId-number
  show      Show      @relation(fields: [showId], references: [id])
  showId    Int
  number    Int
  songs     SetSong[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Song {
  id             Int       @id @default(autoincrement())
  title          String    @unique
  original       Boolean   @default(false)
  timesPlayed    Int       @default(1)
  lastTimePlayed DateTime?
  setlistSongs   SetSong[]
  picks          Pick[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model SetSong {
  id       String  @id // songId-position
  set      Set[]
  song     Song    @relation(fields: [songId], references: [id])
  songId   Int
  position Int
}

model Pick {
  id               String  @id // songId-confidencePoints
  entries          Entry[]
  song             Song    @relation(fields: [songId], references: [id])
  songId           Int
  confidencePoints Int
  isBustout        Boolean @default(false)
}

model Contest {
  id        Int      @id @default(autoincrement())
  show      Show     @relation(fields: [showId], references: [id])
  showId    Int      @unique
  entries   Entry[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Entry {
  id        String    @id // userId-contestId
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  contest   Contest   @relation(fields: [contestId], references: [id])
  contestId Int
  picks     Pick[]
  score     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
